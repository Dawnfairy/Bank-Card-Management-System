{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\GitHub\\\\Bank-Kart-Management\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// contexts/AuthContext.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { getRolPermissionsById } from '../api/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [permissions, setPermissions] = useState([]);\n  const [role, setRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPermissions = async () => {\n      const storedPermissions = sessionStorage.getItem('permissions');\n      if (storedPermissions) {\n        setPermissions(JSON.parse(storedPermissions));\n        setLoading(false);\n      } else {\n        const storedRole = localStorage.getItem('role');\n        setRole(storedRole);\n        try {\n          const response = await getRolPermissionsById(storedRole);\n          setPermissions(response.data);\n          sessionStorage.setItem('permissions', JSON.stringify(response.data));\n        } catch (error) {\n          console.error('Yetkiler al�namad�:', error);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    fetchPermissions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      role,\n      permissions,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"VxJ0oyxhDD61AWkKzZxdHWSOcxg=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","getRolPermissionsById","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","permissions","setPermissions","role","setRole","loading","setLoading","fetchPermissions","storedPermissions","sessionStorage","getItem","JSON","parse","storedRole","localStorage","response","data","setItem","stringify","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Lenovo/GitHub/Bank-Kart-Management/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// contexts/AuthContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { getRolPermissionsById } from '../api/apiService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [role, setRole] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchPermissions = async () => {\r\n            const storedPermissions = sessionStorage.getItem('permissions');\r\n            if (storedPermissions) {\r\n                setPermissions(JSON.parse(storedPermissions));\r\n                setLoading(false);\r\n            } else {\r\n                const storedRole = localStorage.getItem('role');\r\n                setRole(storedRole);\r\n                try {\r\n                    const response = await getRolPermissionsById(storedRole);\r\n                    setPermissions(response.data);\r\n                    sessionStorage.setItem('permissions', JSON.stringify(response.data));\r\n                } catch (error) {\r\n                    console.error('Yetkiler al�namad�:', error);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchPermissions();\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ role, permissions, loading }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,qBAAqB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZ,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,iBAAiB,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;MAC/D,IAAIF,iBAAiB,EAAE;QACnBN,cAAc,CAACS,IAAI,CAACC,KAAK,CAACJ,iBAAiB,CAAC,CAAC;QAC7CF,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,MAAM;QACH,MAAMO,UAAU,GAAGC,YAAY,CAACJ,OAAO,CAAC,MAAM,CAAC;QAC/CN,OAAO,CAACS,UAAU,CAAC;QACnB,IAAI;UACA,MAAME,QAAQ,GAAG,MAAMrB,qBAAqB,CAACmB,UAAU,CAAC;UACxDX,cAAc,CAACa,QAAQ,CAACC,IAAI,CAAC;UAC7BP,cAAc,CAACQ,OAAO,CAAC,aAAa,EAAEN,IAAI,CAACO,SAAS,CAACH,QAAQ,CAACC,IAAI,CAAC,CAAC;QACxE,CAAC,CAAC,OAAOG,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC/C,CAAC,SAAS;UACNb,UAAU,CAAC,KAAK,CAAC;QACrB;MACJ;IACJ,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIX,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,IAAI;MAAEF,WAAW;MAAEI;IAAQ,CAAE;IAAAN,QAAA,EACvDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC1B,EAAA,CAlCWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAoCzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMtC,UAAU,CAACM,WAAW,CAAC;AAAA;AAACgC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}